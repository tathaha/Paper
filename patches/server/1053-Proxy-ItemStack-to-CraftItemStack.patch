From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Tue, 14 May 2024 11:57:43 -0700
Subject: [PATCH] Proxy ItemStack to CraftItemStack


diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index f1e1953f2dc65dc615b7b7b648c37b195d3b4c25..3496b98ff0b984dbfec4f0983459a273dc0e3471 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -22,6 +22,20 @@ import org.bukkit.material.MaterialData;
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
 
+    // Paper start - delegate api-ItemStack to CraftItemStack
+    private static final java.lang.invoke.VarHandle API_ITEM_STACK_CRAFT_DELEGATE_FIELD;
+    static {
+        try {
+            API_ITEM_STACK_CRAFT_DELEGATE_FIELD = java.lang.invoke.MethodHandles.privateLookupIn(
+                ItemStack.class,
+                java.lang.invoke.MethodHandles.lookup()
+            ).findVarHandle(ItemStack.class, "craftDelegate", ItemStack.class);
+        } catch (final IllegalAccessException | NoSuchFieldException exception) {
+            throw new RuntimeException(exception);
+        }
+    }
+    // Paper end
+
     // Paper start - MC Utils
     public static net.minecraft.world.item.ItemStack unwrap(ItemStack bukkit) {
         if (bukkit instanceof CraftItemStack craftItemStack) {
@@ -44,25 +58,15 @@ public final class CraftItemStack extends ItemStack {
     // Paper end - override isEmpty to use vanilla's impl
 
     public static net.minecraft.world.item.ItemStack asNMSCopy(ItemStack original) {
-        if (original instanceof CraftItemStack) {
-            CraftItemStack stack = (CraftItemStack) original;
-            return stack.handle == null ? net.minecraft.world.item.ItemStack.EMPTY : stack.handle.copy();
-        }
-        if (original == null || original.isEmpty()) { // Paper - override isEmpty to use vanilla's impl; use isEmpty
-            return net.minecraft.world.item.ItemStack.EMPTY;
-        }
-
-        Item item = CraftMagicNumbers.getItem(original.getType(), original.getDurability());
-
-        if (item == null) {
-            return net.minecraft.world.item.ItemStack.EMPTY;
-        }
-
-        net.minecraft.world.item.ItemStack stack = new net.minecraft.world.item.ItemStack(item, original.getAmount());
-        if (original.hasItemMeta()) {
-            CraftItemStack.setItemMeta(stack, original.getItemMeta());
+        // Paper start - re-implement after delegating all api ItemStack calls to CraftItemStack
+        final CraftItemStack stack;
+        if (original instanceof final CraftItemStack craftItemStack) {
+            stack = craftItemStack;
+        } else {
+            stack = (CraftItemStack) API_ITEM_STACK_CRAFT_DELEGATE_FIELD.get(original);
         }
-        return stack;
+        return stack.handle == null ? net.minecraft.world.item.ItemStack.EMPTY : stack.handle.copy();
+        // Paper end
     }
 
     // Paper start
@@ -302,11 +306,7 @@ public final class CraftItemStack extends ItemStack {
 
     @Override
     public CraftItemStack clone() {
-        CraftItemStack itemStack = (CraftItemStack) super.clone();
-        if (this.handle != null) {
-            itemStack.handle = this.handle.copy();
-        }
-        return itemStack;
+        return new org.bukkit.craftbukkit.inventory.CraftItemStack(this.handle != null ? this.handle.copy() : null); // Paper
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
index 6bcc3192097dfbf378592fd2437a80dcd0825f13..b54be1122af2b303c0f063ff6b61bf8e2478b0df 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemType.java
@@ -64,7 +64,7 @@ public class CraftItemType<M extends ItemMeta> implements ItemType.Typed<M>, Han
 
     // Cursed, this should be refactored when possible
     private Class<M> getItemMetaClass(Item item) {
-        ItemMeta meta = new ItemStack(this.asMaterial()).getItemMeta();
+        ItemMeta meta = CraftItemFactory.instance().getItemMeta(this.asMaterial()); // Paper - don't create ItemStack here (causes SO)
         if (meta != null) {
             if (CraftMetaEntityTag.class != meta.getClass()/* && CraftMetaArmorStand.class != meta.getClass()*/) { // Paper - CraftMetaArmorStand is implemented in the API via ArmorStandMeta.
                 return (Class<M>) meta.getClass().getInterfaces()[0];
@@ -109,13 +109,14 @@ public class CraftItemType<M extends ItemMeta> implements ItemType.Typed<M>, Han
     @NotNull
     @Override
     public ItemStack createItemStack(final int amount, @Nullable final Consumer<? super M> metaConfigurator) {
-        final ItemStack itemStack = new ItemStack(this.asMaterial(), amount);
+        // Paper start - re-implement to return CraftItemStack
+        final net.minecraft.world.item.ItemStack stack = new net.minecraft.world.item.ItemStack(this.item, amount);
+        final CraftItemStack mirror = CraftItemStack.asCraftMirror(stack);
         if (metaConfigurator != null) {
-            final ItemMeta itemMeta = itemStack.getItemMeta();
-            metaConfigurator.accept((M) itemMeta);
-            itemStack.setItemMeta(itemMeta);
+            mirror.editMeta(this.getItemMetaClass(), metaConfigurator);
         }
-        return itemStack;
+        return mirror;
+        // Paper start - reimplement to return CraftItemStack
     }
 
     @Override
diff --git a/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java b/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..e5c2fb160e9d390cdfa0259a3feb9f488b2dc14d
--- /dev/null
+++ b/src/test/java/io/papermc/paper/configuration/ConfigurationSectionTest.java
@@ -0,0 +1,53 @@
+package io.papermc.paper.configuration;
+
+import org.bukkit.Material;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.support.AbstractTestingBase;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+public abstract class ConfigurationSectionTest extends AbstractTestingBase {
+    public abstract ConfigurationSection getConfigurationSection();
+
+    @Test
+    public void testGetItemStack_String() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+
+        section.set(key, value);
+
+        assertEquals(value, section.getItemStack(key));
+        assertNull(section.getString("doesntExist"));
+    }
+
+    @Test
+    public void testGetItemStack_String_ItemStack() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+        ItemStack def = new ItemStack(Material.STONE, 1);
+
+        section.set(key, value);
+
+        assertEquals(value, section.getItemStack(key, def));
+        assertEquals(def, section.getItemStack("doesntExist", def));
+    }
+
+    @Test
+    public void testIsItemStack() {
+        ConfigurationSection section = getConfigurationSection();
+        String key = "exists";
+        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+
+        section.set(key, value);
+
+        assertTrue(section.isItemStack(key));
+        assertFalse(section.isItemStack("doesntExist"));
+    }
+}
diff --git a/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java b/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..def33c36f207a4c5306b5a895336aa70335c1678
--- /dev/null
+++ b/src/test/java/io/papermc/paper/configuration/MemorySectionTest.java
@@ -0,0 +1,11 @@
+package io.papermc.paper.configuration;
+
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.MemoryConfiguration;
+
+public class MemorySectionTest extends ConfigurationSectionTest {
+    @Override
+    public ConfigurationSection getConfigurationSection() {
+        return new MemoryConfiguration().createSection("section");
+    }
+}
